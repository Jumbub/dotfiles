#!/usr/bin/env bash


alias asource="source $HOME/.aliases"
alias zsource="source $HOME/.zshrc"

alias doinstall="zsh $HOME/scripts/install.sh"

LOCATION_REPOS=$HOME/repos
LOCATION_DOTFILES_REPO_GIT=${LOCATION_REPOS}/dotfiles.git
LOCATION_GIT_IGNORE=${HOME}/.gitignore
dot() {
  if [ $1 = "checkout" ] || [ $1 = "reset" ]
  then
     echo "Please use dotcheckout"
  else
    git --git-dir=${LOCATION_DOTFILES_REPO_GIT} --work-tree=$HOME $@
  fi
}
dotupdate() {
  INPUT=$@
  dot add -A
  dot commit -m "${INPUT}"
  dot push
}
dotwhoops() {
  dot add -A
  dot commit --amend --no-edit
  dot push -f
}
dotadd() {(
  if [[ $1 ]]; then
    # Split the string by the "/" delimiter
    PATH_SPLIT=("${(s|/|)${1}}")
    BUILT_STRING="!"
    for PATH_PART in $PATH_SPLIT; do
      BUILT_STRING="${BUILT_STRING}/${PATH_PART}"
      # If the built string is already in the file, do not append again
      if ! grep -q "${BUILT_STRING}" "${LOCATION_GIT_IGNORE}"; then
        # Add the file/folder to the gitignore
        echo $BUILT_STRING >> $LOCATION_GIT_IGNORE
      fi
    done
  else
    echo "dotadd <PATH>"
  fi
)}
dotbackup() {(
  # This file needs to exist for the ls-files command option
  touch $HOME/.gitignore

  # Create backup folder
  BACKUP_TIME_NOW="$(date +%s)"
  BACKUP_FOLDER=$HOME/.dotfiles-backup/$BACKUP_TIME_NOW
  mkdir -p $BACKUP_FOLDER

  dot ls-files --modified | xargs -i cp {} $BACKUP_FOLDER 2>/dev/null

  # Attempt to delete directory (only succeeds if folder is empty)
  rmdir $BACKUP_FOLDER --ignore-fail-on-non-empty

  # Give some info to the user
  if [ -d "$BACKUP_FOLDER" ]
  then
    echo "Modified files:"
    ls -a --ignore="." --ignore=".." $BACKUP_FOLDER
    echo
    echo "Backups saved to $HOME/.dotfiles-backup/$BACKUP_TIME_NOW"
  else
    echo "Nothing to update"
  fi
)}
dotcheckout() {
  dot fetch
  dotbackup
  cd $HOME
  dot checkout -- .
  cd -
  echo "You may need to reload your terminal."
}